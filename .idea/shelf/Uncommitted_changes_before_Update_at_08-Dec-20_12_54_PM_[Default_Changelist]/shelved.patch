Index: app/src/main/java/com/masterandroid/backgroundservice/LocationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.masterandroid.backgroundservice;\r\n\r\nimport android.Manifest;\r\nimport android.app.Service;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.location.Address;\r\nimport android.location.Geocoder;\r\nimport android.os.CountDownTimer;\r\nimport android.os.IBinder;\r\nimport android.os.Looper;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.app.ActivityCompat;\r\n\r\nimport com.google.android.gms.location.LocationCallback;\r\nimport com.google.android.gms.location.LocationRequest;\r\nimport com.google.android.gms.location.LocationResult;\r\nimport com.google.android.gms.location.LocationServices;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.JsonObject;\r\nimport com.masterandroid.backgroundservice.retrofit.ApiClient;\r\nimport com.masterandroid.backgroundservice.retrofit.ApiInterface;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\nimport okhttp3.MultipartBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class LocationService extends Service {\r\n    ApiInterface retrofit_API;\r\n\r\n    String details;\r\n    List<String> visitAddress;\r\n    static CountDownTimer countDownTimer = null;\r\n    private LocationCallback locationCallback = new LocationCallback() {\r\n        @Override\r\n        public void onLocationResult(LocationResult locationResult) {\r\n            super.onLocationResult(locationResult);\r\n            if (locationResult != null && locationResult.getLastLocation() != null) {\r\n                double longitude = locationResult.getLastLocation().getLongitude();\r\n                double latitude = locationResult.getLastLocation().getLatitude();\r\n                Log.d (\"LOCATION_UPDATE\",latitude+\",\"+longitude);\r\n                details= getAddress(longitude,latitude);\r\n                visitAddress.add(details);\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    @Nullable\r\n    @Override\r\n    public IBinder onBind(Intent intent) {\r\n        throw new UnsupportedOperationException(\"Not yet Implemented\");\r\n    }\r\n\r\n    private void startLocation()\r\n    {\r\n\r\n        if (countDownTimer != null) {\r\n            countDownTimer.cancel();\r\n        }\r\n        // 60*1*1000 = 1 min\r\n        // 50000 = 50 seconds\r\n        // 10000 = 10 seconds;\r\n\r\n        // Try Increasing countDownInterval\r\n        countDownTimer = new CountDownTimer(20000, 1000) {\r\n            public void onTick(long millisUntilFinished)\r\n            {\r\n                String left=Long.toString(millisUntilFinished);\r\n                Log.d(\"Service Time Interval \",left);\r\n\r\n                LocationRequest locationRequest = new LocationRequest();\r\n\r\n                // Try adjusting the location.setFastestInterval\r\n                /*\r\n                50*100 = 5,000 = 5 Seconds\r\n                100*100 = 10,000 = 10 Seconds\r\n                 */\r\n                locationRequest.setInterval(5000);\r\n                locationRequest.setFastestInterval(100*100);\r\n                locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r\n\r\n                if (ActivityCompat.checkSelfPermission(LocationService.this, Manifest.permission.ACCESS_FINE_LOCATION)\r\n                        != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(LocationService.this,\r\n                        Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n                    // TODO: Consider calling\r\n                    //    ActivityCompat#requestPermissions\r\n                    // here to request the missing permissions, and then overriding\r\n                    //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n                    //                                          int[] grantResults)\r\n                    // to handle the case where the user grants the permission. See the documentation\r\n                    // for ActivityCompat#requestPermissions for more details.\r\n                    return;\r\n                }\r\n                LocationServices.getFusedLocationProviderClient(LocationService.this)\r\n                        .requestLocationUpdates(locationRequest, locationCallback, Looper.getMainLooper());\r\n            }\r\n            public void onFinish()\r\n            {\r\n                Log.d(\"done!\", \"done!\");\r\n                stopLocation();\r\n                Gson gson= new Gson();\r\n                String jsonText= gson.toJson(visitAddress);\r\n                SharedPreferences sharedPreferences= getSharedPreferences(\"Details\", Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor= sharedPreferences.edit();\r\n                editor.putString(\"AddressList\",jsonText);\r\n                editor.apply();\r\n            }\r\n        };\r\n\r\n        countDownTimer.start();\r\n        visitAddress= new ArrayList<>();\r\n\r\n    }\r\n\r\n\r\n    private void stopLocation(){\r\n        LocationServices.getFusedLocationProviderClient(this)\r\n                .removeLocationUpdates(locationCallback);\r\n        stopForeground(true);\r\n        stopSelf();\r\n        countDownTimer.cancel();\r\n\r\n    }\r\n\r\n    private String getAddress(double Longitude, double Latitude){\r\n        Geocoder geocoder;\r\n        String completeDetails=\"\";\r\n        List<Address> addresses= new ArrayList<>();\r\n        geocoder=new Geocoder(this, Locale.getDefault());\r\n\r\n        try {\r\n            addresses= geocoder.getFromLocation(Latitude,Longitude,1);\r\n            String address = addresses.get(0).getAddressLine(0); // If any additional address line present than only, check with max available address lines by getMaxAddressLineIndex()\r\n            String city = addresses.get(0).getLocality();\r\n            String state = addresses.get(0).getAdminArea();\r\n            String country = addresses.get(0).getCountryName();\r\n            String postalCode = addresses.get(0).getPostalCode();\r\n            String knownName = addresses.get(0).getFeatureName();\r\n\r\n            completeDetails= address;\r\n            Log.d(\"LOCATION Push\",\"Push In DB\");\r\n            Log.d(\"LOCATION_DETAILS\",Latitude+\", \"+Longitude+\", \"+knownName+\", \"+address);\r\n\r\n//            Log.d(\"CheckForCity\",city);\r\n//            place visit=new place(Longitude,Latitude,address,city);\r\n//            retrofit_API= ApiClient.getClient().create(ApiInterface.class);\r\n//\r\n//            Call<Response> call=retrofit_API.insertUser(Double.toString(Longitude), Double.toString(Latitude), address, city);\r\n//            call.enqueue(new Callback<Response>() {\r\n//                @Override\r\n//                public void onResponse(Call<Response> call, Response<Response> response) {\r\n//                    if (!response.isSuccessful())\r\n//                    {\r\n//                        Log.d(\"LocationService\", \"No Success\");\r\n//                    }\r\n//                    else\r\n//                        {\r\n//                            Log.d(\"LocationService\", \"Success\");\r\n//                        }\r\n//                }\r\n//\r\n//                @Override\r\n//                public void onFailure(Call<Response> call, Throwable t) {\r\n//                    Log.d(\"onFailure\", t.getMessage());\r\n//                }\r\n//            });\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return completeDetails;\r\n    }\r\n\r\n    @Override\r\n    public int onStartCommand(Intent intent, int flags, int startId) {\r\n        if(intent!=null){\r\n            String action= intent.getAction();\r\n            if(action!=null){\r\n                if(action.equals(Constants.ACTION_START_LOCATION_SERVICE)){\r\n                    startLocation();\r\n                }\r\n                else if(action.equals(Constants.ACTION_STOP_LOCATION_SERVICE)){\r\n                    stopLocation();\r\n                }\r\n            }\r\n\r\n        }\r\n        return super.onStartCommand(intent, flags, startId);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/masterandroid/backgroundservice/LocationService.java	(revision 14cd261f8673af2bd27dbb722ad325b5d8ee4817)
+++ app/src/main/java/com/masterandroid/backgroundservice/LocationService.java	(date 1607413825363)
@@ -69,9 +69,9 @@
     private void startLocation()
     {
 
-        if (countDownTimer != null) {
-            countDownTimer.cancel();
-        }
+//        if (countDownTimer != null) {
+//            countDownTimer.cancel();
+//        }
         // 60*1*1000 = 1 min
         // 50000 = 50 seconds
         // 10000 = 10 seconds;
